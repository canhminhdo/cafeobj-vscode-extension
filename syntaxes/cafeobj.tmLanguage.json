{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "cafeobj",
	"fileTypes": [
		"maude",
		"obj"
	],
	"patterns": [
		{
			"include": "#toplevel"
		},
		{
			"include": "#base"
		}
	],
	"repository": {
		"base": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"match": "\\b(-?\\d+(/\\d+|(\\.\\d+)?([eE]-?\\d+(\\.\\d+)?)?)?)\\b",
					"name": "constant.numeric.cafe"
				},
				{
					"name": "constant.language.bool.cafe",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "keyword.operator.bool.cafe",
					"match": "(=/?=|\\b(if|then|else|fi|and|or|xor|not|implies)\\b)"
				},
				{
					"match": "\\b(CHAR-VALUE|FLOAT-VALUE|ID|INT-VALUE|NAT-VALUE|NZNAT-VALUE|RAT-VALUE|STRING-VALUE|TRIV|TRUTH-VALUE)\\b",
					"name": "support.type.module.cafe"
				},
				{
					"match": "\\b(Nat|NzNat|Int|String|Bool|Elt)\\b",
					"name": "support.type.sort.cafe"
				},
				{
					"match": "\\b(s|p|quo|rem|divides|<|>|>=|<=)\\b",
					"name": "support.type.operator.cafe"
				},
				{
					"match": "\\b(mod(!|\\*)?|eval|view)\\b",
					"name": "keyword.control.cafe"
				},
				{
					"match": "[,.:<>\\(\\)\\[\\]\\{\\}]",
					"name": "punctuation.other.cafe"
				}
			]
		},
		"toplevel": {
			"patterns": [
				{
					"include": "#module"
				},
				{
					"include": "#command"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"include": "#comment-line"
				},
				{
					"include": "#comment-block"
				}
			]
		},
		"comment-line": {
			"name": "comment.line.cafe",
			"begin": "\\s*(--|-->|\\*\\*|\\*\\*>)",
			"end": "$"
		},
		"comment-block": {
			"name": "comment.block.cafe",
			"begin": "\\s*#\\|",
			"end": "\\|#$"
		},
		"module": {
			"patterns": [
				{
					"begin": "(mod(?:ule)?(?:!|\\*)?)\\s+([^,.;\\[\\]\\(\\)\\{\\}\\s]+(?:\\{[^,.;\\[\\]\\(\\)\\{\\}\\s]+\\})?)\\s+(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.module.cafe"
						},
						"2": {
							"name": "entity.name.type.module.cafe"
						},
						"3": {
							"name": "keyword.control.module.cafe"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "keyword.control.module.cafe"
						}
					},
					"name": "meta.module.mod.cafe",
					"patterns": [
						{
							"include": "#import"
						},
						{
							"include": "#declaration"
						},
						{
							"include": "#statement"
						},
						{
							"include": "#base"
						}
					]
				}
			]
		},
		"import": {
			"begin": "(inc(?:luding)?|ex(?:tending)?|pr(?:otecting)?|us(?:ing)?)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.import.cafe"
				},
				"2": {
					"name": "punctuation.beginning.cafe"
				}
			},
			"end": "(\\))\\s*(\\.)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.terminator.cafe"
				}
			},
			"name": "meta.import.module.cafe",
			"patterns": [
				{
					"include": "#identifier"
				}
			]
		},
		"identifier": {
			"patterns": [
				{
					"match": "([^,.;\\[\\]\\(\\)\\{\\}\\s]+(?:\\{[^,.;\\[\\]\\(\\)\\{\\}\\s]+\\})?)",
					"name": "entity.name.type.module.cafe"
				}
			]
		},
		"declaration": {
			"patterns": [
				{
					"include": "#sort"
				},
				{
					"include": "#subsort"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#variable"
				}
			]
		},
		"sort": {
			"begin": "^\\s*([)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.beginning.cafe"
				}
			},
			"end": "(\\])\\s*(\\.)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.terminator.cafe"
				}
			},
			"name": "meta.definition.sort.cafe",
			"patterns": [
				{
					"include": "#identifier"
				}
			]
		}
	},
	"scopeName": "source.cafe"
}