{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "cafeobj",
	"fileTypes": [
		"cafeobj",
		"obj"
	],
	"patterns": [
		{
			"include": "#main"
		},
		{
			"include": "#base"
		}
	],
	"repository": {
		"base": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"match": "\\b(-?\\d+(/\\d+|(\\.\\d+)?([eE]-?\\d+(\\.\\d+)?)?)?)\\b",
					"name": "constant.numeric.cafeobj"
				},
				{
					"name": "constant.language.bool.cafeobj",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "keyword.operator.bool.cafeobj",
					"match": "(=/?=|\\b(if|then|else|fi|and|or|xor|not|implies)\\b)"
				},
				{
					"match": "\\b(CHAR-VALUE|FLOAT-VALUE|ID|INT-VALUE|NAT-VALUE|NZNAT-VALUE|RAT-VALUE|STRING-VALUE|TRIV|TRUTH-VALUE)\\b",
					"name": "support.type.module.cafeobj"
				},
				{
					"match": "\\b(Nat|NzNat|Int|String|Bool|Elt)\\b",
					"name": "support.type.sort.cafeobj"
				},
				{
					"match": "\\b(mod(!|\\*)?|eval|view)\\b",
					"name": "keyword.control.cafeobj"
				},
				{
					"match": "[,.:<>\\(\\)\\[\\]\\{\\}]",
					"name": "punctuation.other.cafeobj"
				}
			]
		},
		"main": {
			"patterns": [
				{
					"include": "#module"
				},
				{
					"include": "#proofscore"
				},
				{
					"include": "#command"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.cafeobj",
					"begin": "\\s*(-- |--> |\\*\\*|\\*\\*>)",
					"end": "$"
				},
				{
					"name": "comment.block.cafeobj",
					"begin": "\\s*#\\|",
					"end": "\\|#$"
				}
			]
		},
		"module": {
			"patterns": [
				{
					"begin": "(mod(?:ule)?(?:!|\\*)?)\\s+([^,.;\\[\\]\\(\\)\\{\\}\\s]+(?:[^,.;\\[\\]]+)?)\\s+(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.module.cafeobj"
						},
						"2": {
							"name": "entity.name.type.module.cafeobj"
						},
						"3": {
							"name": "punctuation.definition.module.start.cafeobj"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.module.end.cafeobj"
						}
					},
					"name": "meta.module.mod.cafeobj",
					"patterns": [
						{
							"include": "#import"
						},
						{
							"include": "#declaration"
						},
						{
							"include": "#statement"
						},
						{
							"include": "#base"
						}
					]
				},
				{
					"begin": "(view)\\s+([^,.;\\[\\]\\(\\)\\{\\}\\s]+(?:\\{[^,.;\\[\\]\\(\\)\\{\\}\\s]+\\})?)\\s+(from)\\s+([^,.;\\[\\]\\(\\)\\{\\}\\s]+(?:\\{[^,.;\\[\\]\\(\\)\\{\\}\\s]+\\})?)\\s+(to)\\s+([^,.;\\[\\]\\(\\)\\{\\}\\s]+(?:\\{[^,.;\\[\\]\\(\\)\\{\\}\\s]+\\})?)\\s+(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.module.cafeobj"
						},
						"2": {
							"name": "entity.name.type.module.cafeobj"
						},
						"3": {
							"name": "keyword.control.module.cafeobj"
						},
						"4": {
							"name": "support.type.module.cafeobj"
						},
						"5": {
							"name": "keyword.control.module.cafeobj"
						},
						"6": {
							"name": "support.type.module.cafeobj"
						},
						"7": {
							"name": "punctuation.definition.view.start.cafeobj"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.view.end.cafeobj"
						}
					},
					"name": "meta.definition.view.cafeobj",
					"patterns": [
						{
							"include": "#mapping"
						},
						{
							"include": "#base"
						}
					]
				},
				{
					"begin": "(\\bopen\\b(?:!|\\*)?)\\s+([^,.;\\[\\]\\(\\)\\{\\}\\s]+(?:\\{[^,.;\\[\\]\\(\\)\\{\\}\\s]+\\})?)\\s+(\\.)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.proofscore.open.cafeobj"
						},
						"2": {
							"name": "entity.name.type.module.cafeobj"
						}
					},
					"end": "(\\bclose\\b)",
					"endCaptures": {
						"1": {
							"name": "keyword.control.proofscore.close.cafeobj"
						}
					},
					"name": "meta.module.proofscore.cafeobj",
					"patterns": [
						{
							"include": "#declaration"
						},
						{
							"include": "#statement"
						},
						{
							"include": "#command"
						},
						{
							"include": "#base"
						}
					]
				}
			]
		},
		"import": {
			"begin": "(inc(?:luding)?|ex(?:tending)?|pr(?:otecting)?|us(?:ing)?)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.import.cafeobj"
				},
				"2": {
					"name": "punctuation.import.start.cafeobj"
				}
			},
			"end": "(\\))\\s*(\\.)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.import.end.cafeobj"
				},
				"2": {
					"name": "punctuation.terminator.cafeobj"
				}
			},
			"name": "meta.import.module.cafeobj",
			"patterns": [
				{
					"match": "\\s+\\+\\s+",
					"name": "keyword.operator.sum.import.cafeobj"
				},
				{
					"match": "([^,.;\\[\\]\\(\\)\\{\\}\\s]+(?:\\{[^,.;\\[\\]\\(\\)\\{\\}\\s]+\\})?)",
					"name": "entity.name.type.module.cafeobj"
				}
			]
		},
		"declaration": {
			"patterns": [
				{
					"include": "#sort"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#variable"
				},
				{
					"include": "#predicate"
				}
			]
		},
		"sort": {
			"begin": "^\\s*(\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.sort.start.cafeobj"
				}
			},
			"end": "(\\])\\s*(\\.)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.sort.end.cafeobj"
				},
				"2": {
					"name": "punctuation.terminator.cafeobj"
				}
			},
			"name": "meta.definition.sort.cafeobj",
			"patterns": [
				{
					"match": "\\s+\\<\\s+",
					"name": "keyword.operator.sub.sort.cafeobj"
				},
				{
					"match": "([^,.;\\[\\]\\(\\)\\{\\}\\s]+(?:\\{[^,.;\\[\\]\\(\\)\\{\\}\\s]+\\})?)",
					"name": "support.type.sort.cafeobj"
				}
			]
		},
		"operator": {
			"begin": "\\b(ops?)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.operator.cafeobj"
				}
			},
			"end": "$",
			"name": "meta.definition.operator.cafeobj",
			"patterns": [
				{
					"begin": "(?<=\\s)(:)(?=\\s)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.op-arity.cafeobj"
						}
					},
					"end": "(?=\\s[-~]>\\s)",
					"name": "meta.definition.operator.arity.cafeobj",
					"patterns": [
						{
							"match": "[^\\s,.:\\[\\]\\{\\}](?:,\\s*|\\S)*",
							"name": "support.type.sort.cafeobj"
						},
						{
							"include": "#base"
						}
					]
				},
				{
					"begin": "(?<=\\s)([-~]>)\\s+(?:([^\\s,.:\\[\\]\\{\\}](?:,\\s*|\\S)*)|(\\[[^\\]]+\\]))(?=\\s)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.op-coarity.cafeobj"
						},
						"2": {
							"name": "support.type.sort.cafeobj"
						},
						"3": {
							"name": "support.type.kind.cafeobj"
						}
					},
					"end": "$",
					"name": "meta.definition.coarity.domain.cafeobj",
					"patterns": [
						{
							"include": "#operator-attributes"
						},
						{
							"include": "#base"
						}
					]
				},
				{
					"match": "\\S+",
					"name": "entity.name.function.operator.cafeobj"
				},
				{
					"include": "#base"
				}
			]
		},
		"operator-attributes": {
			"begin": "(?<=\\s)(\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.attributes.begin.cafeobj"
				}
			},
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.attributes.end.cafeobj"
				}
			},
			"name": "meta.definition.attributes.operator.cafeobj",
			"patterns": [
				{
					"match": "(constr(uctor)?|(l-|r-)?assoc(iative)?|comm(utative)?|idemp(otent)?|id(entity)?:|strat:|memo|coherent|prec(edence)?:)",
					"name": "keyword.other.attribute.cafeobj"
				},
				{
					"include": "#base"
				}
			]
		},
		"variable": {
			"begin": "\\b(vars?)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.variable.cafeobj"
				}
			},
			"end": "$",
			"name": "meta.definition.variable.cafeobj",
			"patterns": [
				{
					"begin": "(?<=\\s)(:)(?=\\s)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.member.cafeobj"
						}
					},
					"end": "$",
					"name": "meta.definition.variable.sort.cafeobj",
					"patterns": [
						{
							"match": "[^\\s,.:\\[\\]\\{\\}](?:,\\s*|\\S)*",
							"name": "support.type.sort.cafeobj"
						},
						{
							"match": "\\[[^\\]]+\\]",
							"name": "support.type.kind.cafeobj"
						},
						{
							"include": "#base"
						}
					]
				},
				{
					"match": "\\S+",
					"name": "variable.other.var.cafeobj"
				},
				{
					"include": "#base"
				}
			]
		},
		"statement": {
			"patterns": [
				{
					"include": "#equation"
				}
			]
		},
		"statement-attributes": {
			"begin": "(?<=\\s)(\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.attributes.begin.cafeobj"
				}
			},
			"end": "(\\])",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.attributes.end.cafeobj"
				}
			},
			"name": "meta.definition.attributes.statement.cafeobj",
			"patterns": [
				{
					"match": "(:nonexec)",
					"name": "keyword.other.attribute.cafeobj"
				}
			]
		},
		"equation": {
			"patterns": [
				{
					"begin": "\\b(eq)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.equation.cafeobj"
						}
					},
					"end": "(?<=[\\s])(\\.)",
					"endCaptures": {
						"1": {
							"name": "punctuation.terminator.cafeobj"
						}
					},
					"name": "meta.equation.eq.cafeobj",
					"patterns": [
						{
							"begin": "(?<=\\s)(=)(?=\\s)",
							"beginCaptures": {
								"1": {
									"name": "keyword.operator.equal.cafeobj"
								}
							},
							"end": "(?<=[\\s])(?=\\.)",
							"name": "meta.equation.eq.rhs.cafeobj",
							"patterns": [
								{
									"include": "#nested-brackets"
								},
								{
									"include": "#base"
								}
							]
						},
						{
							"begin": "(?<=eq)",
							"end": "(?<=\\s)(?==\\s)",
							"name": "meta.equation.eq.lhs.cafeobj",
							"patterns": [
								{
									"include": "#statement-attributes"
								},
								{
									"include": "#nested-brackets"
								},
								{
									"include": "#base"
								}
							]
						},
						{
							"include": "#base"
						}
					]
				},
				{
					"begin": "\\b(ceq)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.equation.cafeobj"
						}
					},
					"end": "(?<=[\\s])(\\.)",
					"endCaptures": {
						"1": {
							"name": "punctuation.terminator.cafeobj"
						}
					},
					"name": "meta.equation.ceq.cafeobj",
					"patterns": [
						{
							"begin": "(?<=\\s)(=)(?=\\s)",
							"beginCaptures": {
								"1": {
									"name": "keyword.operator.equal.cafeobj"
								}
							},
							"end": "(?<=[\\s])(?=\\.)",
							"name": "meta.equation.ceq.rhs.cafeobj",
							"patterns": [
								{
									"match": "(?<=[\\s\\(])(\\w)+\\s*(\\()",
									"name": "entity.name.function.operator.cafeobj"
								},
								{
									"include": "#condition"
								},
								{
									"include": "#nested-brackets"
								},
								{
									"include": "#base"
								}
							]
						},
						{
							"begin": "(?<=ceq)",
							"end": "(?<=\\s)(?==\\s)",
							"name": "meta.equation.ceq.lhs.cafeobj",
							"patterns": [
								{
									"match": "(?<=[\\s\\(])(\\w)+\\s*(\\()",
									"name": "entity.name.function.operator.cafeobj"
								},
								{
									"include": "#statement-attributes"
								},
								{
									"include": "#nested-brackets"
								},
								{
									"include": "#base"
								}
							]
						},
						{
							"include": "#base"
						}
					]
				}
			]
		},
		"nested-brackets": {
			"patterns": [
				{
					"begin": "(?<=[^`])\\[",
					"captures": {
						"0": {
							"name": "punctuation.section.brackets.cafeobj"
						}
					},
					"end": "\\]",
					"patterns": [
						{
							"include": "#nested-brackets"
						},
						{
							"include": "#base"
						}
					]
				},
				{
					"begin": "(?<=[^`])\\(",
					"captures": {
						"0": {
							"name": "punctuation.section.parenthesis.cafeobj"
						}
					},
					"end": "\\)",
					"patterns": [
						{
							"include": "#nested-brackets"
						},
						{
							"include": "#base"
						}
					]
				}
			]
		},
		"condition": {
			"begin": "\\b(if)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.condition.cafeobj"
				}
			},
			"end": "(?<=\\s)(?=\\.)",
			"name": "meta.condition.cafeobj",
			"patterns": [
				{
					"match": "(?<=\\s)/\\\\(?=\\s)",
					"name": "keyword.operator.conjunction.cafeobj"
				},
				{
					"match": "(?<=\\s)\\\\/(?=\\s)",
					"name": "keyword.operator.disconjunction.cafeobj"
				},
				{
					"match": "(?<=\\s)(=|!=)(?=\\s)",
					"name": "keyword.operator.condition.cafeobj"
				},
				{
					"include": "#base"
				}
			]
		},
		"command": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "keyword.other.command.system.cafeobj"
						}
					},
					"match": "\\b(in|load|q(uit)?|pwd|cd|ls)\\b\\s*(.*)$",
					"name": "meta.command.system.cafeobj"
				},
				{
					"begin": "\\b(red(uce)?)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.command.reduce.cafeobj"
						}
					},
					"end": "(?<=[\\s])(\\.)",
					"endCaptures": {
						"1": {
							"name": "punctuation.terminator.cafeobj"
						}
					},
					"name": "meta.command.reduce.cafeobj",
					"patterns": [
						{
							"include": "#base"
						},
						{
							"include": "#nested-brackets"
						}
					]
				},
				{
					"include": "#nested-brackets"
				},
				{
					"include": "#base"
				}
			]
		},
		"mapping": {
			"patterns": [
				{
					"include": "#variable"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.control.mapping.cafeobj"
						},
						"2": {
							"name": "support.type.sort.cafeobj"
						},
						"3": {
							"name": "keyword.control.mapping.cafeobj"
						},
						"4": {
							"name": "support.type.sort.cafeobj"
						},
						"5": {
							"name": "punctuation.terminator.cafeobj"
						}
					},
					"match": "(sort)\\s+([A-Z]\\S*)\\s+(->)\\s+([A-Z]\\S*)\\s*(\\,)",
					"name": "meta.mapping.sort.cafeobj"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.control.mapping.cafeobj"
						},
						"2": {
							"name": "support.function.operator.cafeobj"
						},
						"3": {
							"name": "keyword.control.mapping.cafeobj"
						},
						"4": {
							"name": "support.function.operator.cafeobj"
						},
						"5": {
							"name": "punctuation.terminator.cafeobj"
						}
					},
					"match": "(op)\\s+([a-z]\\S*)\\s+(->)\\s+([a-z]\\S*)\\s*(\\,)",
					"name": "meta.mapping.operator.cafeobj"
				},
				{
					"include": "#base"
				}
			]
		},
		"predicate": {
			"begin": "\\b(pred)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.predicate.cafeobj"
				}
			},
			"end": "$",
			"name": "meta.definition.predicate.cafeobj",
			"patterns": [
				{
					"begin": "(?<=\\s)(:)(?=\\s)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.member.cafeobj"
						}
					},
					"end": "$",
					"name": "meta.definition.predicate.sort.cafeobj",
					"patterns": [
						{
							"match": "[^\\s,.:\\[\\]\\{\\}](?:,\\s*|\\S)*",
							"name": "support.type.sort.cafeobj"
						},
						{
							"match": "\\[[^\\]]+\\]",
							"name": "support.type.kind.cafeobj"
						},
						{
							"include": "#base"
						}
					]
				},
				{
					"match": "\\S+",
					"name": "predicate.other.var.cafeobj"
				},
				{
					"include": "#base"
				}
			]
		}
	},
	"scopeName": "source.cafeobj"
}